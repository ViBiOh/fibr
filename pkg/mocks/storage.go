// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/absto/pkg/model (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/storage.go -package mocks -mock_names Storage=Storage github.com/ViBiOh/absto/pkg/model Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	os "os"
	reflect "reflect"
	time "time"

	model "github.com/ViBiOh/absto/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// Storage is a mock of Storage interface.
type Storage struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *StorageMockRecorder
}

// StorageMockRecorder is the mock recorder for Storage.
type StorageMockRecorder struct {
	mock *Storage
}

// NewStorage creates a new mock instance.
func NewStorage(ctrl *gomock.Controller) *Storage {
	mock := &Storage{ctrl: ctrl}
	mock.recorder = &StorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Storage) EXPECT() *StorageMockRecorder {
	return m.recorder
}

// ConvertError mocks base method.
func (m *Storage) ConvertError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConvertError indicates an expected call of ConvertError.
func (mr *StorageMockRecorder) ConvertError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertError", reflect.TypeOf((*Storage)(nil).ConvertError), err)
}

// Enabled mocks base method.
func (m *Storage) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *StorageMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*Storage)(nil).Enabled))
}

// List mocks base method.
func (m *Storage) List(ctx context.Context, name string) ([]model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, name)
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *StorageMockRecorder) List(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Storage)(nil).List), ctx, name)
}

// Mkdir mocks base method.
func (m *Storage) Mkdir(ctx context.Context, name string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", ctx, name, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *StorageMockRecorder) Mkdir(ctx, name, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*Storage)(nil).Mkdir), ctx, name, perm)
}

// Name mocks base method.
func (m *Storage) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *StorageMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*Storage)(nil).Name))
}

// Path mocks base method.
func (m *Storage) Path(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *StorageMockRecorder) Path(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*Storage)(nil).Path), name)
}

// ReadFrom mocks base method.
func (m *Storage) ReadFrom(ctx context.Context, name string) (model.ReadAtSeekCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", ctx, name)
	ret0, _ := ret[0].(model.ReadAtSeekCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *StorageMockRecorder) ReadFrom(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*Storage)(nil).ReadFrom), ctx, name)
}

// RemoveAll mocks base method.
func (m *Storage) RemoveAll(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *StorageMockRecorder) RemoveAll(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*Storage)(nil).RemoveAll), ctx, name)
}

// Rename mocks base method.
func (m *Storage) Rename(ctx context.Context, oldName, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, oldName, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *StorageMockRecorder) Rename(ctx, oldName, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*Storage)(nil).Rename), ctx, oldName, newName)
}

// Stat mocks base method.
func (m *Storage) Stat(ctx context.Context, name string) (model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", ctx, name)
	ret0, _ := ret[0].(model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *StorageMockRecorder) Stat(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*Storage)(nil).Stat), ctx, name)
}

// UpdateDate mocks base method.
func (m *Storage) UpdateDate(ctx context.Context, name string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDate", ctx, name, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDate indicates an expected call of UpdateDate.
func (mr *StorageMockRecorder) UpdateDate(ctx, name, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDate", reflect.TypeOf((*Storage)(nil).UpdateDate), ctx, name, date)
}

// Walk mocks base method.
func (m *Storage) Walk(ctx context.Context, name string, walkFn func(model.Item) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, name, walkFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *StorageMockRecorder) Walk(ctx, name, walkFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*Storage)(nil).Walk), ctx, name, walkFn)
}

// WithIgnoreFn mocks base method.
func (m *Storage) WithIgnoreFn(ignoreFn func(model.Item) bool) model.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIgnoreFn", ignoreFn)
	ret0, _ := ret[0].(model.Storage)
	return ret0
}

// WithIgnoreFn indicates an expected call of WithIgnoreFn.
func (mr *StorageMockRecorder) WithIgnoreFn(ignoreFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIgnoreFn", reflect.TypeOf((*Storage)(nil).WithIgnoreFn), ignoreFn)
}

// WriteTo mocks base method.
func (m *Storage) WriteTo(ctx context.Context, name string, reader io.Reader, opts model.WriteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", ctx, name, reader, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTo indicates an expected call of WriteTo.
func (mr *StorageMockRecorder) WriteTo(ctx, name, reader, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*Storage)(nil).WriteTo), ctx, name, reader, opts)
}
