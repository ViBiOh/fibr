// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/httputils/v4/pkg/redis (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/redis_client.go -package mocks -mock_names Client=RedisClient github.com/ViBiOh/httputils/v4/pkg/redis Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// RedisClient is a mock of Client interface.
type RedisClient struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *RedisClientMockRecorder
}

// RedisClientMockRecorder is the mock recorder for RedisClient.
type RedisClientMockRecorder struct {
	mock *RedisClient
}

// NewRedisClient creates a new mock instance.
func NewRedisClient(ctrl *gomock.Controller) *RedisClient {
	mock := &RedisClient{ctrl: ctrl}
	mock.recorder = &RedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RedisClient) EXPECT() *RedisClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *RedisClient) Close(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close.
func (mr *RedisClientMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*RedisClient)(nil).Close), arg0)
}

// Delete mocks base method.
func (m *RedisClient) Delete(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *RedisClientMockRecorder) Delete(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*RedisClient)(nil).Delete), varargs...)
}

// DeletePattern mocks base method.
func (m *RedisClient) DeletePattern(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePattern", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePattern indicates an expected call of DeletePattern.
func (mr *RedisClientMockRecorder) DeletePattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePattern", reflect.TypeOf((*RedisClient)(nil).DeletePattern), ctx, pattern)
}

// Enabled mocks base method.
func (m *RedisClient) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *RedisClientMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*RedisClient)(nil).Enabled))
}

// Exclusive mocks base method.
func (m *RedisClient) Exclusive(ctx context.Context, name string, timeout time.Duration, action func(context.Context) error) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exclusive", ctx, name, timeout, action)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exclusive indicates an expected call of Exclusive.
func (mr *RedisClientMockRecorder) Exclusive(ctx, name, timeout, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exclusive", reflect.TypeOf((*RedisClient)(nil).Exclusive), ctx, name, timeout, action)
}

// Expire mocks base method.
func (m *RedisClient) Expire(ctx context.Context, ttl time.Duration, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ttl}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Expire", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *RedisClientMockRecorder) Expire(ctx, ttl any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ttl}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*RedisClient)(nil).Expire), varargs...)
}

// FlushAll mocks base method.
func (m *RedisClient) FlushAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *RedisClientMockRecorder) FlushAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*RedisClient)(nil).FlushAll), arg0)
}

// Load mocks base method.
func (m *RedisClient) Load(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *RedisClientMockRecorder) Load(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*RedisClient)(nil).Load), ctx, key)
}

// LoadMany mocks base method.
func (m *RedisClient) LoadMany(ctx context.Context, keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadMany", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMany indicates an expected call of LoadMany.
func (mr *RedisClientMockRecorder) LoadMany(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMany", reflect.TypeOf((*RedisClient)(nil).LoadMany), varargs...)
}

// Ping mocks base method.
func (m *RedisClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *RedisClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*RedisClient)(nil).Ping), ctx)
}

// Pipeline mocks base method.
func (m *RedisClient) Pipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// Pipeline indicates an expected call of Pipeline.
func (mr *RedisClientMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*RedisClient)(nil).Pipeline))
}

// Publish mocks base method.
func (m *RedisClient) Publish(ctx context.Context, channel string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *RedisClientMockRecorder) Publish(ctx, channel, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*RedisClient)(nil).Publish), ctx, channel, value)
}

// PublishJSON mocks base method.
func (m *RedisClient) PublishJSON(ctx context.Context, channel string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishJSON", ctx, channel, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishJSON indicates an expected call of PublishJSON.
func (mr *RedisClientMockRecorder) PublishJSON(ctx, channel, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishJSON", reflect.TypeOf((*RedisClient)(nil).PublishJSON), ctx, channel, value)
}

// Pull mocks base method.
func (m *RedisClient) Pull(ctx context.Context, key string, handler func(string, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pull", ctx, key, handler)
}

// Pull indicates an expected call of Pull.
func (mr *RedisClientMockRecorder) Pull(ctx, key, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*RedisClient)(nil).Pull), ctx, key, handler)
}

// Push mocks base method.
func (m *RedisClient) Push(ctx context.Context, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *RedisClientMockRecorder) Push(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*RedisClient)(nil).Push), ctx, key, value)
}

// Scan mocks base method.
func (m *RedisClient) Scan(ctx context.Context, pattern string, output chan<- string, pageSize int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, pattern, output, pageSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *RedisClientMockRecorder) Scan(ctx, pattern, output, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*RedisClient)(nil).Scan), ctx, pattern, output, pageSize)
}

// Store mocks base method.
func (m *RedisClient) Store(ctx context.Context, key string, value any, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *RedisClientMockRecorder) Store(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*RedisClient)(nil).Store), ctx, key, value, ttl)
}

// StoreMany mocks base method.
func (m *RedisClient) StoreMany(ctx context.Context, values map[string]any, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMany", ctx, values, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMany indicates an expected call of StoreMany.
func (mr *RedisClientMockRecorder) StoreMany(ctx, values, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMany", reflect.TypeOf((*RedisClient)(nil).StoreMany), ctx, values, ttl)
}

// Subscribe mocks base method.
func (m *RedisClient) Subscribe(ctx context.Context, channel string) (<-chan *redis.Message, func(context.Context)) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, channel)
	ret0, _ := ret[0].(<-chan *redis.Message)
	ret1, _ := ret[1].(func(context.Context))
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *RedisClientMockRecorder) Subscribe(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*RedisClient)(nil).Subscribe), ctx, channel)
}
