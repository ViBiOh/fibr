// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source interfaces.go -destination ../mocks/interfaces.go -package mocks -mock_names Crud=Crud,Auth=Auth,ShareManager=ShareManager,WebhookManager=WebhookManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	ident "github.com/ViBiOh/auth/v2/pkg/ident"
	model "github.com/ViBiOh/auth/v2/pkg/model"
	provider "github.com/ViBiOh/fibr/pkg/provider"
	renderer "github.com/ViBiOh/httputils/v4/pkg/renderer"
	gomock "go.uber.org/mock/gomock"
)

// Crud is a mock of Crud interface.
type Crud struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *CrudMockRecorder
}

// CrudMockRecorder is the mock recorder for Crud.
type CrudMockRecorder struct {
	mock *Crud
}

// NewCrud creates a new mock instance.
func NewCrud(ctrl *gomock.Controller) *Crud {
	mock := &Crud{ctrl: ctrl}
	mock.recorder = &CrudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Crud) EXPECT() *CrudMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Crud) Create(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", arg0, arg1, arg2)
}

// Create indicates an expected call of Create.
func (mr *CrudMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Crud)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *Crud) Delete(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
}

// Delete indicates an expected call of Delete.
func (mr *CrudMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Crud)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *Crud) Get(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) (renderer.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(renderer.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *CrudMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Crud)(nil).Get), arg0, arg1, arg2)
}

// Post mocks base method.
func (m *Crud) Post(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Post", arg0, arg1, arg2)
}

// Post indicates an expected call of Post.
func (mr *CrudMockRecorder) Post(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*Crud)(nil).Post), arg0, arg1, arg2)
}

// Rename mocks base method.
func (m *Crud) Rename(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rename", arg0, arg1, arg2)
}

// Rename indicates an expected call of Rename.
func (mr *CrudMockRecorder) Rename(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*Crud)(nil).Rename), arg0, arg1, arg2)
}

// Auth is a mock of Auth interface.
type Auth struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *AuthMockRecorder
}

// AuthMockRecorder is the mock recorder for Auth.
type AuthMockRecorder struct {
	mock *Auth
}

// NewAuth creates a new mock instance.
func NewAuth(ctrl *gomock.Controller) *Auth {
	mock := &Auth{ctrl: ctrl}
	mock.recorder = &AuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Auth) EXPECT() *AuthMockRecorder {
	return m.recorder
}

// IsAuthenticated mocks base method.
func (m *Auth) IsAuthenticated(arg0 *http.Request) (ident.Provider, model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated", arg0)
	ret0, _ := ret[0].(ident.Provider)
	ret1, _ := ret[1].(model.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *AuthMockRecorder) IsAuthenticated(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*Auth)(nil).IsAuthenticated), arg0)
}

// IsAuthorized mocks base method.
func (m *Auth) IsAuthorized(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *AuthMockRecorder) IsAuthorized(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*Auth)(nil).IsAuthorized), arg0, arg1)
}

// ShareManager is a mock of ShareManager interface.
type ShareManager struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *ShareManagerMockRecorder
}

// ShareManagerMockRecorder is the mock recorder for ShareManager.
type ShareManagerMockRecorder struct {
	mock *ShareManager
}

// NewShareManager creates a new mock instance.
func NewShareManager(ctrl *gomock.Controller) *ShareManager {
	mock := &ShareManager{ctrl: ctrl}
	mock.recorder = &ShareManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ShareManager) EXPECT() *ShareManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ShareManager) Create(arg0 context.Context, arg1 string, arg2, arg3 bool, arg4 string, arg5 bool, arg6 time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ShareManagerMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ShareManager)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Delete mocks base method.
func (m *ShareManager) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ShareManagerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ShareManager)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *ShareManager) Get(arg0 string) provider.Share {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(provider.Share)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *ShareManagerMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ShareManager)(nil).Get), arg0)
}

// List mocks base method.
func (m *ShareManager) List() []provider.Share {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]provider.Share)
	return ret0
}

// List indicates an expected call of List.
func (mr *ShareManagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ShareManager)(nil).List))
}

// UpdatePassword mocks base method.
func (m *ShareManager) UpdatePassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *ShareManagerMockRecorder) UpdatePassword(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*ShareManager)(nil).UpdatePassword), arg0, arg1, arg2)
}

// WebhookManager is a mock of WebhookManager interface.
type WebhookManager struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *WebhookManagerMockRecorder
}

// WebhookManagerMockRecorder is the mock recorder for WebhookManager.
type WebhookManagerMockRecorder struct {
	mock *WebhookManager
}

// NewWebhookManager creates a new mock instance.
func NewWebhookManager(ctrl *gomock.Controller) *WebhookManager {
	mock := &WebhookManager{ctrl: ctrl}
	mock.recorder = &WebhookManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *WebhookManager) EXPECT() *WebhookManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *WebhookManager) Create(arg0 context.Context, arg1 string, arg2 bool, arg3 provider.WebhookKind, arg4 string, arg5 []provider.EventType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *WebhookManagerMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*WebhookManager)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method.
func (m *WebhookManager) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *WebhookManagerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*WebhookManager)(nil).Delete), arg0, arg1)
}

// FindByURL mocks base method.
func (m *WebhookManager) FindByURL(arg0 string, arg1 provider.Request) provider.Webhook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByURL", arg0, arg1)
	ret0, _ := ret[0].(provider.Webhook)
	return ret0
}

// FindByURL indicates an expected call of FindByURL.
func (mr *WebhookManagerMockRecorder) FindByURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByURL", reflect.TypeOf((*WebhookManager)(nil).FindByURL), arg0, arg1)
}

// Get mocks base method.
func (m *WebhookManager) Get(arg0 string) provider.Webhook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(provider.Webhook)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *WebhookManagerMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*WebhookManager)(nil).Get), arg0)
}

// List mocks base method.
func (m *WebhookManager) List() []provider.Webhook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]provider.Webhook)
	return ret0
}

// List indicates an expected call of List.
func (mr *WebhookManagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*WebhookManager)(nil).List))
}
