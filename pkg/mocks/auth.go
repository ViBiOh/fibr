// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/fibr/pkg/provider (interfaces: Auth)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	ident "github.com/ViBiOh/auth/v2/pkg/ident"
	model "github.com/ViBiOh/auth/v2/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// Auth is a mock of Auth interface.
type Auth struct {
	ctrl     *gomock.Controller
	recorder *AuthMockRecorder
}

// AuthMockRecorder is the mock recorder for Auth.
type AuthMockRecorder struct {
	mock *Auth
}

// NewAuth creates a new mock instance.
func NewAuth(ctrl *gomock.Controller) *Auth {
	mock := &Auth{ctrl: ctrl}
	mock.recorder = &AuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Auth) EXPECT() *AuthMockRecorder {
	return m.recorder
}

// IsAuthenticated mocks base method.
func (m *Auth) IsAuthenticated(arg0 *http.Request) (ident.Provider, model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated", arg0)
	ret0, _ := ret[0].(ident.Provider)
	ret1, _ := ret[1].(model.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *AuthMockRecorder) IsAuthenticated(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*Auth)(nil).IsAuthenticated), arg0)
}

// IsAuthorized mocks base method.
func (m *Auth) IsAuthorized(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *AuthMockRecorder) IsAuthorized(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*Auth)(nil).IsAuthorized), arg0, arg1)
}
