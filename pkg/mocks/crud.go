// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/fibr/pkg/provider (interfaces: Crud)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	provider "github.com/ViBiOh/fibr/pkg/provider"
	renderer "github.com/ViBiOh/httputils/v4/pkg/renderer"
	gomock "github.com/golang/mock/gomock"
)

// Crud is a mock of Crud interface.
type Crud struct {
	ctrl     *gomock.Controller
	recorder *CrudMockRecorder
}

// CrudMockRecorder is the mock recorder for Crud.
type CrudMockRecorder struct {
	mock *Crud
}

// NewCrud creates a new mock instance.
func NewCrud(ctrl *gomock.Controller) *Crud {
	mock := &Crud{ctrl: ctrl}
	mock.recorder = &CrudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Crud) EXPECT() *CrudMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Crud) Create(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", arg0, arg1, arg2)
}

// Create indicates an expected call of Create.
func (mr *CrudMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Crud)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *Crud) Delete(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
}

// Delete indicates an expected call of Delete.
func (mr *CrudMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Crud)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *Crud) Get(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) (renderer.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(renderer.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *CrudMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Crud)(nil).Get), arg0, arg1, arg2)
}

// Post mocks base method.
func (m *Crud) Post(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Post", arg0, arg1, arg2)
}

// Post indicates an expected call of Post.
func (mr *CrudMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*Crud)(nil).Post), arg0, arg1, arg2)
}

// Rename mocks base method.
func (m *Crud) Rename(arg0 http.ResponseWriter, arg1 *http.Request, arg2 provider.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rename", arg0, arg1, arg2)
}

// Rename indicates an expected call of Rename.
func (mr *CrudMockRecorder) Rename(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*Crud)(nil).Rename), arg0, arg1, arg2)
}
